<?php

namespace Tests\Unit\Models;

use App\Models\Output;
use App\Models\Input;
use App\Models\Feedback;
use App\Models\Embedding;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Database\Eloquent\Collection;

class OutputTest extends TestCase
{
    use RefreshDatabase;

    /**
     * Test that Output model can be created with required fields
     *
     * Given: Required output data (input_id, content, type, ai_model)
     * When: Creating a new Output model
     * Then: Output should be saved with correct attributes and relationships
     */
    public function test_output_can_be_created_with_required_fields()
    {
        // Given
        $input = Input::create([
            'content' => 'Original input content',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $outputData = [
            'input_id' => $input->id,
            'content' => 'AI-generated checklist based on input',
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet',
            'metadata' => json_encode(['processing_time' => 2.5, 'tokens_used' => 1500])
        ];

        // When
        $output = Output::create($outputData);

        // Then
        $this->assertInstanceOf(Output::class, $output);
        $this->assertEquals($outputData['input_id'], $output->input_id);
        $this->assertEquals($outputData['content'], $output->content);
        $this->assertEquals($outputData['type'], $output->type);
        $this->assertEquals($outputData['ai_model'], $output->ai_model);
        $this->assertNotNull($output->id);
        $this->assertNotNull($output->created_at);
    }

    /**
     * Test Output model validation rules
     *
     * Given: Invalid output data
     * When: Attempting to create Output
     * Then: Should enforce validation rules for required fields
     */
    public function test_output_validates_required_fields()
    {
        $this->expectException(\Illuminate\Database\QueryException::class);

        // When - attempting to create without required fields
        Output::create([]);
    }

    /**
     * Test Output model type enumeration
     *
     * Given: Valid output types
     * When: Creating Output with different types
     * Then: Should accept valid types (checklist, summary, action_items, stakeholder_list, communication)
     */
    public function test_output_accepts_valid_types()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $validTypes = ['checklist', 'summary', 'action_items', 'stakeholder_list', 'communication'];

        foreach ($validTypes as $type) {
            // When
            $output = Output::create([
                'input_id' => $input->id,
                'content' => 'AI-generated ' . $type,
                'type' => $type,
                'ai_model' => 'claude-3-5-sonnet'
            ]);

            // Then
            $this->assertEquals($type, $output->type);
        }
    }

    /**
     * Test Output model AI model tracking
     *
     * Given: Different AI models
     * When: Creating Output with various AI models
     * Then: Should track which AI model generated the output
     */
    public function test_output_tracks_ai_model()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $aiModels = ['claude-3-5-sonnet', 'gpt-4', 'claude-3-haiku'];

        foreach ($aiModels as $model) {
            // When
            $output = Output::create([
                'input_id' => $input->id,
                'content' => 'Generated by ' . $model,
                'type' => 'summary',
                'ai_model' => $model
            ]);

            // Then
            $this->assertEquals($model, $output->ai_model);
        }
    }

    /**
     * Test Output model metadata handling
     *
     * Given: AI processing metadata
     * When: Creating Output with metadata
     * Then: Should store processing metrics and generation details
     */
    public function test_output_handles_ai_metadata()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $metadata = [
            'processing_time' => 3.2,
            'tokens_used' => 2500,
            'confidence_score' => 0.89,
            'prompt_version' => 'v2.1',
            'temperature' => 0.7
        ];

        $output = Output::create([
            'input_id' => $input->id,
            'content' => 'AI-generated content',
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet',
            'metadata' => json_encode($metadata)
        ]);

        // When
        $retrievedMetadata = json_decode($output->metadata, true);

        // Then
        $this->assertEquals($metadata, $retrievedMetadata);
        $this->assertEquals(3.2, $retrievedMetadata['processing_time']);
        $this->assertEquals(2500, $retrievedMetadata['tokens_used']);
    }

    /**
     * Test Output model relationship with Input
     *
     * Given: An Output linked to an Input
     * When: Accessing input relationship
     * Then: Should return the associated Input model
     */
    public function test_output_belongs_to_input()
    {
        // Given
        $input = Input::create([
            'content' => 'Original input content',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $output = Output::create([
            'input_id' => $input->id,
            'content' => 'AI-generated output',
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet'
        ]);

        // When
        $relatedInput = $output->input;

        // Then
        $this->assertInstanceOf(Input::class, $relatedInput);
        $this->assertEquals($input->id, $relatedInput->id);
        $this->assertEquals($input->content, $relatedInput->content);
    }

    /**
     * Test Output model relationship with Feedback
     *
     * Given: An Output that can receive feedback
     * When: Accessing feedback relationship
     * Then: Should return collection of Feedback models
     */
    public function test_output_has_many_feedback_relationship()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $output = Output::create([
            'input_id' => $input->id,
            'content' => 'AI-generated content',
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet'
        ]);

        // When - accessing feedback relationship
        $feedback = $output->feedback;

        // Then
        $this->assertInstanceOf(Collection::class, $feedback);
        $this->assertEquals(0, $feedback->count()); // Empty initially
    }

    /**
     * Test Output model relationship with Embeddings
     *
     * Given: An Output that should have embeddings
     * When: Accessing embeddings relationship
     * Then: Should return related Embedding model
     */
    public function test_output_has_one_embedding_relationship()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $output = Output::create([
            'input_id' => $input->id,
            'content' => 'AI-generated content for embedding',
            'type' => 'summary',
            'ai_model' => 'claude-3-5-sonnet'
        ]);

        // When - accessing embedding relationship
        $embedding = $output->embedding;

        // Then - initially null, but relationship should exist
        $this->assertNull($embedding); // Initially no embedding
    }

    /**
     * Test Output model versioning for iterative improvements
     *
     * Given: Multiple outputs for the same input
     * When: Creating successive versions
     * Then: Should track version numbers and parent relationships
     */
    public function test_output_supports_versioning()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input for versioning',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $v1Output = Output::create([
            'input_id' => $input->id,
            'content' => 'First version of AI output',
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet',
            'version' => 1
        ]);

        $v2Output = Output::create([
            'input_id' => $input->id,
            'content' => 'Improved version based on feedback',
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet',
            'version' => 2,
            'parent_output_id' => $v1Output->id
        ]);

        // Then
        $this->assertEquals(1, $v1Output->version);
        $this->assertEquals(2, $v2Output->version);
        $this->assertEquals($v1Output->id, $v2Output->parent_output_id);
    }

    /**
     * Test Output model quality scoring
     *
     * Given: Output with quality metrics
     * When: Creating Output with quality score
     * Then: Should store and retrieve quality assessment data
     */
    public function test_output_tracks_quality_metrics()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $qualityMetrics = [
            'completeness_score' => 0.85,
            'relevance_score' => 0.92,
            'clarity_score' => 0.88,
            'overall_quality' => 0.88
        ];

        $output = Output::create([
            'input_id' => $input->id,
            'content' => 'High-quality AI output',
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet',
            'quality_score' => $qualityMetrics['overall_quality'],
            'metadata' => json_encode(['quality_metrics' => $qualityMetrics])
        ]);

        // When
        $metadata = json_decode($output->metadata, true);

        // Then
        $this->assertEquals(0.88, $output->quality_score);
        $this->assertEquals($qualityMetrics, $metadata['quality_metrics']);
    }

    /**
     * Test Output model feedback integration status
     *
     * Given: Output that has received feedback
     * When: Checking feedback integration status
     * Then: Should track whether feedback has been incorporated
     */
    public function test_output_tracks_feedback_integration_status()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $output = Output::create([
            'input_id' => $input->id,
            'content' => 'AI output awaiting feedback',
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet'
        ]);

        // When - simulating feedback received
        $output->update([
            'feedback_integrated' => true,
            'feedback_count' => 3
        ]);

        // Then
        $this->assertTrue($output->feedback_integrated);
        $this->assertEquals(3, $output->feedback_count);
    }

    /**
     * Test Output model content formatting and structure
     *
     * Given: Structured AI output content
     * When: Creating Output with formatted content
     * Then: Should preserve formatting and enable structured access
     */
    public function test_output_preserves_structured_content()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        $structuredContent = [
            'title' => 'Release Checklist',
            'items' => [
                ['id' => 1, 'text' => 'Review code changes', 'completed' => false],
                ['id' => 2, 'text' => 'Run test suite', 'completed' => false],
                ['id' => 3, 'text' => 'Deploy to staging', 'completed' => false]
            ],
            'metadata' => ['estimated_time' => '2 hours']
        ];

        $output = Output::create([
            'input_id' => $input->id,
            'content' => json_encode($structuredContent),
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet',
            'content_format' => 'json'
        ]);

        // When
        $parsedContent = json_decode($output->content, true);

        // Then
        $this->assertEquals($structuredContent, $parsedContent);
        $this->assertEquals('Release Checklist', $parsedContent['title']);
        $this->assertCount(3, $parsedContent['items']);
        $this->assertEquals('json', $output->content_format);
    }

    /**
     * Test Output model query scopes for filtering and analysis
     *
     * Given: Multiple outputs with different characteristics
     * When: Using query scopes
     * Then: Should filter by type, AI model, quality score, and feedback status
     */
    public function test_output_query_scopes()
    {
        // Given
        $input = Input::create([
            'content' => 'Test input',
            'type' => 'brain_dump',
            'source' => 'manual_entry'
        ]);

        Output::create([
            'input_id' => $input->id,
            'content' => 'Checklist output',
            'type' => 'checklist',
            'ai_model' => 'claude-3-5-sonnet',
            'quality_score' => 0.9
        ]);

        Output::create([
            'input_id' => $input->id,
            'content' => 'Summary output',
            'type' => 'summary',
            'ai_model' => 'gpt-4',
            'quality_score' => 0.7
        ]);

        // When - using hypothetical scopes
        $checklists = Output::where('type', 'checklist')->get();
        $highQuality = Output::where('quality_score', '>', 0.8)->get();
        $claudeOutputs = Output::where('ai_model', 'claude-3-5-sonnet')->get();

        // Then
        $this->assertEquals(1, $checklists->count());
        $this->assertEquals(1, $highQuality->count());
        $this->assertEquals(1, $claudeOutputs->count());
        $this->assertEquals('checklist', $checklists->first()->type);
    }
}